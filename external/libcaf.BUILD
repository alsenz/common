#TODO would be good to split this up a bit to get caf to build under bazel!

genrule(
    name = "libcaf_genrule",
    srcs = glob(["**/*"]),
    outs = ["external/libcaf/libcaf_core/caf/detail/build_config.hpp"],
    cmd = "cmake external/libcaf -DCAF_BUILD_STATIC_ONLY=ON -DCAF_BUILD_STATIC=ON -DCAF_LOG_LEVEL=INFO && cp libcaf_core/caf/detail/build_config.hpp $(@D)"
)

cc_library(
    name = "libcaf_build_config",
    hdrs = ["external/libcaf/libcaf_core/caf/detail/build_config.hpp"],
    strip_include_prefix = "external/libcaf/libcaf_core"
)


cc_library(
    name = "libcaf_core",
    srcs = [  "libcaf_core/src/abstract_actor.cpp",
              "libcaf_core/src/abstract_channel.cpp",
              "libcaf_core/src/abstract_composable_behavior.cpp",
              "libcaf_core/src/abstract_coordinator.cpp",
              "libcaf_core/src/abstract_group.cpp",
              "libcaf_core/src/actor.cpp",
              "libcaf_core/src/actor_addr.cpp",
              "libcaf_core/src/actor_clock.cpp",
              "libcaf_core/src/actor_companion.cpp",
              "libcaf_core/src/actor_config.cpp",
              "libcaf_core/src/actor_control_block.cpp",
              "libcaf_core/src/actor_ostream.cpp",
              "libcaf_core/src/actor_pool.cpp",
              "libcaf_core/src/actor_proxy.cpp",
              "libcaf_core/src/actor_registry.cpp",
              "libcaf_core/src/actor_system.cpp",
              "libcaf_core/src/actor_system_config.cpp",
              "libcaf_core/src/append_hex.cpp",
              "libcaf_core/src/atom.cpp",
              "libcaf_core/src/attachable.cpp",
              "libcaf_core/src/behavior.cpp",
              "libcaf_core/src/behavior_impl.cpp",
              "libcaf_core/src/behavior_stack.cpp",
              "libcaf_core/src/blocking_actor.cpp",
              "libcaf_core/src/blocking_behavior.cpp",
              "libcaf_core/src/chars.cpp",
              "libcaf_core/src/concatenated_tuple.cpp",
              "libcaf_core/src/config_option.cpp",
              "libcaf_core/src/config_option_adder.cpp",
              "libcaf_core/src/config_option_set.cpp",
              "libcaf_core/src/config_value.cpp",
              "libcaf_core/src/decorated_tuple.cpp",
              "libcaf_core/src/default_attachable.cpp",
              "libcaf_core/src/defaults.cpp",
              "libcaf_core/src/deserializer.cpp",
              "libcaf_core/src/downstream_manager.cpp",
              "libcaf_core/src/downstream_manager_base.cpp",
              "libcaf_core/src/downstream_messages.cpp",
              "libcaf_core/src/duration.cpp",
              "libcaf_core/src/dynamic_message_data.cpp",
              "libcaf_core/src/error.cpp",
              "libcaf_core/src/event_based_actor.cpp",
              "libcaf_core/src/execution_unit.cpp",
              "libcaf_core/src/exit_reason.cpp",
              "libcaf_core/src/forwarding_actor_proxy.cpp",
              "libcaf_core/src/get_mac_addresses.cpp",
              "libcaf_core/src/get_process_id.cpp",
              "libcaf_core/src/get_root_uuid.cpp",
              "libcaf_core/src/group.cpp",
              "libcaf_core/src/group_manager.cpp",
              "libcaf_core/src/group_module.cpp",
              "libcaf_core/src/inbound_path.cpp",
              "libcaf_core/src/ini_consumer.cpp",
              "libcaf_core/src/invoke_result_visitor.cpp",
              "libcaf_core/src/ipv4_address.cpp",
              "libcaf_core/src/ipv4_subnet.cpp",
              "libcaf_core/src/ipv6_address.cpp",
              "libcaf_core/src/ipv6_subnet.cpp",
              "libcaf_core/src/local_actor.cpp",
              "libcaf_core/src/logger.cpp",
              "libcaf_core/src/mailbox_element.cpp",
              "libcaf_core/src/make_config_option.cpp",
              "libcaf_core/src/match_case.cpp",
              "libcaf_core/src/memory_managed.cpp",
              "libcaf_core/src/merged_tuple.cpp",
              "libcaf_core/src/message.cpp",
              "libcaf_core/src/message_builder.cpp",
              "libcaf_core/src/message_data.cpp",
              "libcaf_core/src/message_handler.cpp",
              "libcaf_core/src/message_view.cpp",
              "libcaf_core/src/monitorable_actor.cpp",
              "libcaf_core/src/node_id.cpp",
              "libcaf_core/src/outbound_path.cpp",
              "libcaf_core/src/pec.cpp",
              "libcaf_core/src/pretty_type_name.cpp",
              "libcaf_core/src/private_thread.cpp",
              "libcaf_core/src/proxy_registry.cpp",
              "libcaf_core/src/raise_error.cpp",
              "libcaf_core/src/raw_event_based_actor.cpp",
              "libcaf_core/src/ref_counted.cpp",
              "libcaf_core/src/replies_to.cpp",
              "libcaf_core/src/response_promise.cpp",
              "libcaf_core/src/resumable.cpp",
              "libcaf_core/src/ripemd_160.cpp",
              "libcaf_core/src/runtime_settings_map.cpp",
              "libcaf_core/src/scheduled_actor.cpp",
              "libcaf_core/src/scoped_actor.cpp",
              "libcaf_core/src/scoped_execution_unit.cpp",
              "libcaf_core/src/sec.cpp",
              "libcaf_core/src/sequencer.cpp",
              "libcaf_core/src/serializer.cpp",
              "libcaf_core/src/set_thread_name.cpp",
              "libcaf_core/src/shared_spinlock.cpp",
              "libcaf_core/src/simple_actor_clock.cpp",
              "libcaf_core/src/skip.cpp",
              "libcaf_core/src/splitter.cpp",
              "libcaf_core/src/stream_aborter.cpp",
              "libcaf_core/src/stream_manager.cpp",
              "libcaf_core/src/stream_priority.cpp",
              "libcaf_core/src/string_algorithms.cpp",
              "libcaf_core/src/string_view.cpp",
              "libcaf_core/src/stringification_inspector.cpp",
              "libcaf_core/src/sync_request_bouncer.cpp",
              "libcaf_core/src/term.cpp",
              "libcaf_core/src/test_actor_clock.cpp",
              "libcaf_core/src/test_coordinator.cpp",
              "libcaf_core/src/thread_hook.cpp",
              "libcaf_core/src/thread_safe_actor_clock.cpp",
              "libcaf_core/src/tick_emitter.cpp",
              "libcaf_core/src/timestamp.cpp",
              "libcaf_core/src/try_match.cpp",
              "libcaf_core/src/type_erased_tuple.cpp",
              "libcaf_core/src/type_erased_value.cpp",
              "libcaf_core/src/uniform_type_info_map.cpp",
              "libcaf_core/src/unprofiled.cpp",
              "libcaf_core/src/uri.cpp",
              "libcaf_core/src/uri_builder.cpp",
              "libcaf_core/src/uri_impl.cpp",
              "libcaf_core/src/work_sharing.cpp",
              "libcaf_core/src/work_stealing.cpp"],
    hdrs = glob(["libcaf_core/caf/**/*.hpp"]),
    copts = ["-std=c++11", "-Wextra", "-Wall", "-pedantic", "-ftemplate-depth=512", "-ftemplate-backtrace-limit=0", "-Wno-missing-field-initializers", "-pthread", "-fPIC"],
    strip_include_prefix = "libcaf_core",
    visibility = ["//visibility:public"],
    deps = [":libcaf_build_config"]
)

cc_library(
    name = "libcaf_io",
    srcs = [  "libcaf_io/src/abstract_broker.cpp",
              "libcaf_io/src/acceptor_manager.cpp",
              "libcaf_io/src/basp_broker.cpp",
              "libcaf_io/src/broker.cpp",
              "libcaf_io/src/connection_helper.cpp",
              "libcaf_io/src/datagram_manager.cpp",
              "libcaf_io/src/datagram_servant.cpp",
              "libcaf_io/src/default_multiplexer.cpp",
              "libcaf_io/src/doorman.cpp",
              "libcaf_io/src/header.cpp",
              "libcaf_io/src/hook.cpp",
              "libcaf_io/src/instance.cpp",
              "libcaf_io/src/interfaces.cpp",
              "libcaf_io/src/ip_endpoint.cpp",
              "libcaf_io/src/manager.cpp",
              "libcaf_io/src/message_type.cpp",
              "libcaf_io/src/middleman.cpp",
              "libcaf_io/src/middleman_actor.cpp",
              "libcaf_io/src/middleman_actor_impl.cpp",
              "libcaf_io/src/multiplexer.cpp",
              "libcaf_io/src/protocol.cpp",
              "libcaf_io/src/receive_buffer.cpp",
              "libcaf_io/src/routing_table.cpp",
              "libcaf_io/src/scribe.cpp",
              "libcaf_io/src/stream_manager.cpp",
              "libcaf_io/src/test_multiplexer.cpp",
              "libcaf_io/src/acceptor.cpp",
              "libcaf_io/src/datagram_handler.cpp",
              "libcaf_io/src/datagram_servant_impl.cpp",
              "libcaf_io/src/doorman_impl.cpp",
              "libcaf_io/src/event_handler.cpp",
              "libcaf_io/src/pipe_reader.cpp",
              "libcaf_io/src/scribe_impl.cpp",
              "libcaf_io/src/stream.cpp",
              "libcaf_io/src/tcp.cpp",
              "libcaf_io/src/udp.cpp",
              "libcaf_io/src/native_socket.cpp",
              "libcaf_io/src/socket_guard.cpp"],
    hdrs = glob(["libcaf_io/caf/**/*.hpp"]),
    strip_include_prefix = "libcaf_io",
    visibility = ["//visibility:public"],
    copts = ["-std=c++11", "-Wextra", "-Wall", "-pedantic", "-ftemplate-depth=512", "-ftemplate-backtrace-limit=0", "-Wno-missing-field-initializers", "-pthread", "-fPIC"],
    deps = [":libcaf_build_config", ":libcaf_core"]
)

cc_library(
    name = "libcaf",
    visibility = ["//visibility:public"],
    deps = [":libcaf_io", ":libcaf_core"]
)
